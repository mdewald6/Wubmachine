"""
doubletime.py

Double-speed remix template.
Dependencies:
    FastModify
    Remixer
    lame (command line binary)
    soundstretch (command line binary)
"""

from remixer import *
from fastmodify import FastModify

class DoubleTime(Remixer):
    speedFactor = 2
    def remix(self):
        """
            Remixing happens here. Take your input file from self.infile and write your remix to self.outfile.
            Be sure to .unload() all of your read-in audioData objects to conserve memory.
        """
        # Use the Echo Nest Remix API to open the audio file
        a = audio.AudioData(self.infile)

        # Tell somebody about our progress (add 25%)
        self.log("Shifting tempo...", 25)

        # Use FastModify (a fork of echonest.Modify that uses soundstretch) to stretch beats
        FastModify().shiftTempo(a, self.speedFactor).encode(self.tempfile)

        self.log("Cleaning up...", 25)

        # Remove temporary file auto-generated by the Echo Nest Remix API
        a.unload() 

        self.log("Encoding MP3...", 25)

        # Encode the temporary file into the output file
        self.lame(self.tempfile, self.outfile)

if __name__ == "__main__":
    CMDRemix(DoubleTime)


